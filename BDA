{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyPXUSLqRuv486mKoiJE+axV",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/NikhilReddii/Car-Price-Prediction/blob/master/BDA\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oWVxxh8e65ME"
      },
      "source": [
        "import sys, string, math\r\n",
        "from math import log\r\n",
        "from math import modf\r\n",
        "import operator\r\n",
        "\r\n",
        "outlink_dict = {}\r\n",
        "inlink_dict = {}\r\n",
        "PRank = {}\r\n",
        "new_PRank = {}\r\n",
        "Pages = []\r\n",
        "SortedPR = []\r\n",
        "topic_array = []\r\n",
        "\r\n",
        "d = 0.85"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8fkIhts09qvu"
      },
      "source": [
        "def parse_file(inlink, topic):\r\n",
        "    input = open(inlink, 'r')\r\n",
        "    for line in input.readlines():\r\n",
        "        words = []\r\n",
        "        words = str.split(line)\r\n",
        "        inlink_dict[words[0]] = words[1:]\r\n",
        "        Pages.append(words[0])\r\n",
        "\r\n",
        "    for word in str.split(open(topic, 'r').readline()):\r\n",
        "        topic_array.append(word)\r\n",
        "    #print(topic_array)\r\n",
        "\r\n",
        "    len_dic = float(len(Pages))\r\n",
        "    for page in Pages:\r\n",
        "        PRank[page] = float(1) / len_dic\r\n",
        "\r\n",
        "    for page in inlink_dict.keys():\r\n",
        "        for q in inlink_dict[page]:\r\n",
        "            if q in outlink_dict:\r\n",
        "                outlink_dict[q] += 1\r\n",
        "            else:\r\n",
        "                outlink_dict[q] = 1"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2gU5gOqX9wiM"
      },
      "source": [
        "def cal_topic_sensitive_pagerank():\r\n",
        "    len_dic = float(len(inlink_dict.keys()))\r\n",
        "    ite = 0\r\n",
        "\r\n",
        "    while(ite < 1):\r\n",
        "        for page in PRank.keys():\r\n",
        "            topic_related_page = 1 if page in topic_array else 0\r\n",
        "            if topic_related_page == 1:\r\n",
        "                print(page)\r\n",
        "            new_PRank[page] = (float(1 - d)*topic_related_page) / float(len(topic_array))\r\n",
        "            for q in inlink_dict[page]:\r\n",
        "                new_PRank[page] = new_PRank[page] + (d * float(PRank.get(q)) / float(outlink_dict.get(q)))\r\n",
        "        for page in new_PRank.keys():\r\n",
        "            PRank[page] = new_PRank.get(page)\r\n",
        "        ite = ite + 1\r\n",
        "\r\n",
        "def top_rank():\r\n",
        "    SortedPR = sorted(PRank.items(), key=operator.itemgetter(1), reverse=True)\r\n",
        "    for i in range(100):\r\n",
        "        print(SortedPR[i])"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JCw92Hfg99jn",
        "outputId": "1ddae77c-5727-4b55-c48c-b6c55f4f2cab"
      },
      "source": [
        "if __name__ == \"__main__\":\r\n",
        "        inlink = 'wt2g_inlinks.txt'\r\n",
        "        topic = 'wt2g_example_topic.txt'\r\n",
        "        parse_file(inlink, topic)\r\n",
        "        cal_topic_sensitive_pagerank()\r\n",
        "        top_rank()"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WT04-B27-720\n",
            "WT07-B18-256\n",
            "WT13-B06-273\n",
            "WT14-B03-220\n",
            "WT24-B40-171\n",
            "('WT24-B40-171', 0.006051144007244659)\n",
            "('WT07-B18-256', 0.006032169914821815)\n",
            "('WT14-B03-220', 0.006030595461318635)\n",
            "('WT13-B06-273', 0.006027273015105231)\n",
            "('WT04-B27-720', 0.00602480389816633)\n",
            "('WT25-B15-307', 0.00011214442333248146)\n",
            "('WT01-B18-225', 9.472505043319779e-05)\n",
            "('WT21-B37-76', 9.265686666314545e-05)\n",
            "('WT13-B15-160', 8.482632093577832e-05)\n",
            "('WT08-B19-222', 7.33618003439669e-05)\n",
            "('WT10-B33-300', 7.279809946997847e-05)\n",
            "('WT08-B18-400', 7.057830053113783e-05)\n",
            "('WT21-B37-75', 6.393579768640695e-05)\n",
            "('WT23-B27-29', 6.072322180173743e-05)\n",
            "('WT27-B28-203', 5.90055039496245e-05)\n",
            "('WT13-B39-295', 5.560588332056592e-05)\n",
            "('WT08-B24-319', 5.495693782060099e-05)\n",
            "('WT23-B39-340', 5.246759917367481e-05)\n",
            "('WT27-B34-57', 4.613506915784863e-05)\n",
            "('WT27-B32-30', 4.599183583007483e-05)\n",
            "('WT27-B28-177', 4.485117535955578e-05)\n",
            "('WT04-B30-12', 4.473760657544772e-05)\n",
            "('WT12-B09-105', 4.247295426122311e-05)\n",
            "('WT18-B40-82', 4.059380433041826e-05)\n",
            "('WT25-B23-127', 4.0451753012550205e-05)\n",
            "('WT25-B39-116', 4.0451753012550205e-05)\n",
            "('WT12-B33-212', 3.973367455670629e-05)\n",
            "('WT09-B28-263', 3.785082145757095e-05)\n",
            "('WT23-B37-134', 3.343798558991987e-05)\n",
            "('WT23-B20-363', 3.3300147515172335e-05)\n",
            "('WT12-B17-36', 3.297830521043665e-05)\n",
            "('WT24-B26-2', 3.2185250407884984e-05)\n",
            "('WT13-B30-405', 3.143061757384262e-05)\n",
            "('WT21-B35-155', 3.0329328854536542e-05)\n",
            "('WT21-B03-285', 2.9783230016169054e-05)\n",
            "('WT04-B30-256', 2.899879860590914e-05)\n",
            "('WT23-B19-156', 2.895527432073251e-05)\n",
            "('WT24-B40-167', 2.8928651447968318e-05)\n",
            "('WT04-B40-202', 2.8352193021084958e-05)\n",
            "('WT12-B30-56', 2.8219164714333632e-05)\n",
            "('WT14-B03-227', 2.8172611417616447e-05)\n",
            "('WT13-B06-284', 2.7248257113945014e-05)\n",
            "('WT21-B40-447', 2.6606793400163994e-05)\n",
            "('WT08-B08-60', 2.64636863538217e-05)\n",
            "('WT18-B29-37', 2.6006391801551768e-05)\n",
            "('WT04-B40-238', 2.5872932668275895e-05)\n",
            "('WT23-B18-107', 2.5723166018237163e-05)\n",
            "('WT18-B14-66', 2.5359368355346333e-05)\n",
            "('WT15-B07-95', 2.5018383564644734e-05)\n",
            "('WT18-B38-25', 2.3668482116238683e-05)\n",
            "('WT23-B30-88', 2.318716806045236e-05)\n",
            "('WT21-B01-46', 2.2320884855275504e-05)\n",
            "('WT23-B38-120', 2.1925328851772864e-05)\n",
            "('WT14-B02-400', 2.1850861456352002e-05)\n",
            "('WT07-B15-48', 2.1738110600171434e-05)\n",
            "('WT12-B34-116', 2.1523842061308296e-05)\n",
            "('WT04-B22-268', 2.1231533242261667e-05)\n",
            "('WT07-B02-55', 2.108471350837916e-05)\n",
            "('WT25-B31-102', 2.1084706522694943e-05)\n",
            "('WT18-B18-148', 2.0625312179088847e-05)\n",
            "('WT27-B19-320', 2.0520624007715752e-05)\n",
            "('WT23-B01-40', 2.0264165451386154e-05)\n",
            "('WT13-B25-82', 2.0048328376796487e-05)\n",
            "('WT11-B02-164', 1.991990108805425e-05)\n",
            "('WT22-B14-357', 1.978093279823455e-05)\n",
            "('WT14-B03-221', 1.9744497985876002e-05)\n",
            "('WT20-B03-150', 1.9329801633194603e-05)\n",
            "('WT13-B02-184', 1.9079747303609814e-05)\n",
            "('WT26-B22-336', 1.8979966804526955e-05)\n",
            "('WT21-B37-71', 1.8810464083311274e-05)\n",
            "('WT10-B02-288', 1.8567152903269605e-05)\n",
            "('WT23-B21-53', 1.8503903626726063e-05)\n",
            "('WT22-B38-403', 1.840232183408252e-05)\n",
            "('WT25-B37-137', 1.836992372538619e-05)\n",
            "('WT10-B16-675', 1.8038878507364178e-05)\n",
            "('WT16-B27-59', 1.7951217623690344e-05)\n",
            "('WT25-B29-410', 1.7814472722116974e-05)\n",
            "('WT11-B06-41', 1.7810169396249846e-05)\n",
            "('WT06-B35-151', 1.7785472060347995e-05)\n",
            "('WT27-B20-494', 1.759829460107173e-05)\n",
            "('WT06-B35-161', 1.7576576509556987e-05)\n",
            "('WT13-B30-408', 1.7549866347601552e-05)\n",
            "('WT06-B39-355', 1.7493312063456232e-05)\n",
            "('WT12-B40-248', 1.7369325197546706e-05)\n",
            "('WT06-B09-17', 1.7065404904174388e-05)\n",
            "('WT20-B39-148', 1.704320056797216e-05)\n",
            "('WT25-B31-56', 1.6774400165772815e-05)\n",
            "('WT04-B27-721', 1.6633888497152867e-05)\n",
            "('WT23-B30-105', 1.6534186926341537e-05)\n",
            "('WT25-B17-38', 1.6376022166259036e-05)\n",
            "('WT23-B30-89', 1.6132539175254486e-05)\n",
            "('WT13-B06-280', 1.582859859319506e-05)\n",
            "('WT27-B19-54', 1.5768211024369808e-05)\n",
            "('WT27-B19-302', 1.5628677828944154e-05)\n",
            "('WT24-B26-10', 1.5449328453954628e-05)\n",
            "('WT04-B35-13', 1.5338611739658893e-05)\n",
            "('WT08-B07-159', 1.5309432678595984e-05)\n",
            "('WT07-B10-206', 1.5053963920019493e-05)\n",
            "('WT18-B14-71', 1.503180443040645e-05)\n",
            "('WT18-B31-240', 1.4985195596497334e-05)\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}